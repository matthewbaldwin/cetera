FORMAT: 1A
HOST: api.us.socrata.com/api

# User Search API

The Socrata data platform hosts thousands of Socrata users who help publish/curate data,
maintain open data services, and use open data to create new content and apps. Users may sign up
for a Socrata account on any domain maintained by Socrata, and if the domain's administrator grants
that user a [role](https://support.socrata.com/hc/en-us/articles/202950278-Understanding-user-roles), 
they may use this API to search for Socrata users. Users can be found by keywords, 
email, screen name, role and more.

## Authentication

Authentication is required to use this API. You can authenticate by
- using either of the methods discussed [here](https://dev.socrata.com/docs/authentication.html) and
- providing the `X-Socrata-Host` host header with the domain that has granted you access to view its users.
For example `X-Socrata-Host:data.ny.gov`. We refer to this as the `authenticating domain`.

When properly authenticated, users who have been granted a
[role](https://support.socrata.com/hc/en-us/articles/202950278-Understanding-user-roles) on a Socrata domain may look up other
users on their domain and administrators may look up any user. Unauthenticated users will receive an error response code.

## App Tokens

All programmatic usage of Socrata APIs should include an
[app token](https://dev.socrata.com/docs/app-tokens.html), either via the `X-App-Token` header or the
`$$app_token parameters` set to a valid token. This is assumed and not documented in the API specs below.

## Response
### Response Codes

The Discovery APIs return Socrata's standard [response codes](https://dev.socrata.com/docs/response-codes.html). 

Successful responses will contain a JSON object containing three fields:

- `results` An array of user json objects. Details about these objects are found below in "User Results"
- `resultSetSize` The total number of results that could be returned were they not paged
- `timings` Timing information regarding how long the request took to fulfill

If an error occurs, the response will be a JSON object containing a single `error` key. For example:

{"error":"No user was provided to search users"}

### Paging

Paging is enabled in [the same manner](https://dev.socrata.com/docs/paging.html) as other Socrata APIs via
the `limit` and `offset` parameters. An example of using these to page through users is given below.

### Results

Successful user searches return user `results` with the following fields:

| Field                   | Description                                          | 
|-------------------------|------------------------------------------------------|
|id                       | The unique identifier for the user, e.g. 'epi9-4k9x' |
|email                    | The user's email address. This is unique since no two accounts may share an email address. |
|screen_name              | The screen name the user has chosen, e.g. 'Robin Hood' |
|role_name                | The user's role. Users may have roles on multiple domains, but only the role given by the authenticating domain will be returned. If missing, the user has no role on the authenticating domain. |
|role\_id                  | The ID of the role corresponding to the returned `role_name`. |
|last\_authenticated\_at    | If present, the seconds-since-epoch timestamp of when the user last logged in on the authenticating domain. |
|profile\_image\_url\_large  | The route to the large copy of the user's profile image; only present if the user has chosen a profile picture |
|profile\_image\_url\_medium |  The route to the medium copy of the user's profile image; only present if the user has chosen a profile picture |
|profile\_image\_url\_small  | The route to the small copy of the user's profile image; only present if the user has chosen a profile picture |

## Request Parameters

The production API endpoint for searching users is `https://api.us.socrata.com/api/catalog/v1/users`.
When no parameters are passed, the initial set of users available to search will vary based on your role.
Administrators may search across *all* users. Other roled users may only search across users having a role
on the authenticating domain. This essentially enforces a rule that non-administrators may only search
for their colleagues.  Any and all of the parameters discussed below can be used to limit the intial set
of users. 

# Search Endpoint [/catalog/v1/users]

+ Model (application/json)

            {
                "results": [
                    {
                        "id" : "uniq-uid1",
                        "email" : "someone@somewhere.com",
                        "screen_name" : "Screen Name",
                        "role_name" : "publisher",
                        "role_id" : 5,
                        "last_authenticated_at": 1504753177,
                        "profile_image_url_large": "/api/users/uniq-uid1/profile_images/LARGE",
                        "profile_image_url_medium": "/api/users/uniq-uid1/profile_images/THUMB",
                        "profile_image_url_small": "/api/users/uniq-uid1/profile_images/TINY"
                       }
                  ],
                  "resultSetSize": 1
            }

## Find users by ID [/catalog/v1/users{?ids}]

To lookup a unique user by their ID, use the `ids` param. Multiple users may be 
found by repeated use of the `ids` param, for example `?ids=uniq-uid1&ids=uniq-uid2`

+ Parameters
    + ids (optional, string, `uniq-uid1`) ... The users unique Socrata ID.

### Search by ID [GET]

+ Response 200

    [Search Endpoint][]

## Find users by email [/catalog/v1/users{?emails}]

To look up a unique user by their email, use the `emails` param. Multiple users may be 
found by repeated use of the `emails` param, for example 
`?emails=someone@somewhere.com&emails=someone@somewhere.else.com`

+ Parameters
    + emails (optional, string, `someone@somewhere.com`) ... The users email address.

### Search by email [GET]

+ Response 200

    [Search Endpoint][]
    
## Find users by screen name [/catalog/v1/users{?screen_names}]

To search for users with a particular screen name, use the `screen_names` param. 
Multiple screen names may be searched by repeated use of the `screen_names` param, for example 
`?screen_names=Screen%20Name&screen_names=Pumpkin%20Jack`. Don't forget to URL encode the 
screen name.

+ Parameters
    + screen_names (optional, string, `Screen%20Name`) ... A screen name.

### Search by screen name [GET]

+ Response 200

    [Search Endpoint][]

## Find users by role [/catalog/v1/users{?roles}]

To search users with a particular role, use the `roles` param. Per the discussion above in the "User Results"
section, note that only users with roles on the authenticating domain will be considered.
Multiple roles may be searched by repeated use of the `roles` param, for example 
`?roles=publisher&roles=administrator`. 

+ Parameters
    + roles (optional, string, `publisher`) ... Any Socrata [role](https://support.socrata.com/hc/en-us/articles/202950278-Understanding-user-roles).

### Search by role [GET]

+ Response 200

    [Search Endpoint][]
    
## Find users by role ID [/catalog/v1/users{?role_ids}]
To search users with a particular role ID, use the `role_ids` param. Per the discussion above in the "User Results"
section, note that only users with roles on the authenticating domain will be considered.
Multiple role IDs may be searched by repeated use of the `role_ids` param, for example 
`?role_ids=3&role_ids=4`. 

+ Parameters
    + role_ids (optional, number, `5`) ... A role ID.

### Search by role ID [GET]

+ Response 200

    [Search Endpoint][]


## Find users by domain [/catalog/v1/users{?domain}]

To search for all users on a domain, first understand that users are only linked to a domain
if they have been given a role on the domain. Thus, this search will find all users who 
have a role on the given domain.

+ Parameters
    + domain (optional, string, `data.ny.gov`) ... Any Socrata domain.

### Search by domain [GET]

+ Response 200

    [Search Endpoint][]

## Find users by query term [/catalog/v1/users{?q}]

Users matching a given query term can be found using the `q` paramater. Matches are determined by
whether any of the tokens of the search query match any of the tokens of the user's email and/or 
screen name. For example if a user Jack has email jack.o.latern@pumpkin.patch.com and screen name 
"Pumpkin Jack", the tokens produced will be 
"jack.o.latern", "jack", "latern", "pumkin.patch.com", "pumpkin" and "patch". 
Thus a query using any of those terms will find our user Jack.

+ Parameters
    + q (optional, string, `pumpkin`) ... A string for text search.

### Search by query term [GET]

+ Response 200

    [Search Endpoint][]

## Restrict search to owners, e.g. users with assets [/catalog/v1/users{?only}]

In addition to the above-mentioned query parameters, you can restrict your user search to owners
(ie. users who own assets). This is particularly useful when used in conjunction with the `domain`
parameter to restrict the search to users owning assets on a particular domain. If a valid `only`
parameter is specified, but no `domain` parameter is passed, the service will return a 500.

+ Parameters
    + only (optional, string, `owners`) ... A type of user to search for (eg. `owners`).

### Search for owners [GET]

+ Response 200

    [Search Endpoint][]

## Sort order [/catalog/v1{?order}]

The results of all the above filters can be sorted by a number of fields. If not specified, the
results are sorted by relevance. If a sort field is specified that the search service does not
recognize, the query will fail. For all accepted sort values, either `ASC` or `DESC` can optionally
be specified, eg. `email DESC`. If `ASC` or `DESC` is not specified, the default is `ASC`, or
ascending. Note that spaces must be URL-escaped with `+` or `%20`.

It is possible for search results to have missing values for some of these sort fields (such as
`last_authenticated_at`, for example). Any assets missing a value altogether for the field being sorted
on will show up at the end of the results list.

**Accepted Values:**
- `relevance` (default)
- `email`
- `screen_name`
- `role_name`
- `last_authenticated_at`

+ Parameters
    + order (optional, string, `email`) ... The sort order of the results

### Sort order [GET]

+ response 200

    [Search Endpoint][]

## Page through users [/catalog/v1/users{?offset,limit}]

Users can be paged with use of the `limit` and `offset` params.  
By default the search will return 100 results, starting from 0.

+ Parameters
    + offset (optional, number, `23`) ... Initial starting point for paging (0 by default).
    + limit (optional, number, `47`) ... Number of results to return (10000 max/100 default).

### Pagination [GET]

+ Response 200

    [Search Endpoint][]

## User autocomplete [/catalog/v1/users/autocomplete{?q}]

With the user autocomplete endpoint, you can provide incremental user search suggestions. This API
supports all the same filtering parameters as the basic user search endpoint. Moreover, the
response body has the same top-level shape as the user search API, containing `resultSetSize`,
`results`, and `timings` fields at the root of the response object. The `results` field consists of
an array of objects, with each object containing `matches` and `user` fields. The `match_data`
field is an array of objects indicating the name of the fields in the user object that were the
basis for the match and the corresponding the character offsets of the matches in that field. The
`user` field contains the matching user object (as described in the "Results" section above).

+ Parameters
    + q (A string corresponding to a user screen name or email address)

### Autocomplete [GET]

    [Autocomplete Endpoint][]

+ Response 200

        {
          "resultSetSize": 1,
          "results": [
            {
              "matches": [
                {"field": "screen_name", "offsets": [{"start": 0, "length": 4}, {"start": 5, "length": 3}]},
                {"field": "email", "offsets": [{"start": 0, "length": 4}, {"start": 5, "length": 3}]}
              ],
              "user": {
                "id": "abcd-1234",
                "screen_name": "John Doe - Publisher",
                "email": "john.doe+publisher@gmail.com",
                "roles": [
                  {
                    "domain_id": 1234,
                    "role_name": "publisher",
                    "role_id": 5,
                    "last_authenticated_at": null
                  }
                ]
              }
            }
          ],
          "timings" : {
            "searchMillis" : [2, 29],
            "serviceMillis" : 56
          }
        }